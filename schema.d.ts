/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/catalog-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of items in the catalog */
        get: operations["get_catalog_items_handler_v2_catalog_items_get"];
        put?: never;
        /** Create a new item in the catalog */
        post: operations["create_catalog_item_handler_v2_catalog_items_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalog-items/{item_uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a single catalog item */
        get: operations["get_catalog_items_single_v2_catalog_items__item_uuid__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalog-items/{item_uuid}/reference-images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload reference images for a catalog item */
        post: operations["upload_catalog_item_reference_images_handler_v2_catalog_items__item_uuid__reference_images_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalog-items/{item_uuid}/asset-requests/one-faced-asset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a one-faced asset request */
        post: operations["create_one_faced_asset_request_handler_v2_catalog_items__item_uuid__asset_requests_one_faced_asset_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/image-recognition/tasks/{task_uuid}/urls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process multiple images from urls asynchronously
         * @description This endpoint will start image recognition using existing **image recognition task**.
         *
         *     Images need to be provided in form of publicly accessible http(s) urls.
         *
         *     A separate **result** will be created for each specified image and an array of their uuids will be returned as the response.
         *
         *     This endpoint works **asynchronously**: it will return a response right away, but image recognition will take some time.
         *
         *     You can track their statuses via `/v2/image-recognition/tasks/{task_uuid}/results/{result_uuid}` endpoint.
         *
         *     If you provide a value for the `callback` field in the original payload, after recognition is ready,
         *     an HTTP POST request will be sent to the specified url with the **result** as a payload.
         *
         *     A callback request will be sent for each **result** independently as soon as it is ready.
         */
        post: operations["image_recognition_multi_urls_async_v2_image_recognition_tasks__task_uuid__urls_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/image-recognition/tasks/{task_uuid}/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process multiple images asynchronously
         * @description This endpoint will start image recognition using existing **image recognition task**.
         *
         *     Images need to be uploaded using the **multipart/form-data** encoding method.
         *
         *     A separate **result** will be created for each specified image and an array of their uuids will be returned as the response.
         *
         *     This endpoint works **asynchronously**: it will return a response right away, but image recognition will take some time.
         *
         *     You can track their statuses via `/v2/image-recognition/tasks/{task_uuid}/results/{result_uuid}` endpoint.
         *
         *     If you provide a value for the `callback` field in the original payload, after recognition is ready,
         *     an HTTP POST request will be sent to the specified url with the **result** as a payload.
         *
         *     A callback request will be sent for each **result** independently as soon as it is ready.
         */
        post: operations["image_recognition_multi_images_async_v2_image_recognition_tasks__task_uuid__images_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/image-recognition/tasks/{task_uuid}/sync-image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process single image synchronously
         * @description This endpoint will start image recognition using existing **image recognition task**.
         *
         *     A single image needs to be uploaded using the **multipart/form-data** encoding method.
         *
         *     A new **result** object will be created and returned in the response.
         *
         *     This endpoint works **synchronously**: it will return the response as soon as the processing is finished.
         *
         *     If the image processing takes longer than the timeout, the endpoint will return the **result** with no data and a 408 status code.
         *     However, processing will continue in the background.
         *     To get an update on its status, use the `/v2/image-recognition/tasks/{task_uuid}/results/{result_uuid}` endpoint with provided **result** UUID.
         */
        post: operations["image_recognition_single_image_sync_wrapper_image_recognition_tasks__task_uuid__sync_image_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/image-recognition/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all image recognition tasks */
        get: operations["ir_task_listing_v2_image_recognition_tasks_get"];
        put?: never;
        /** Create new image recognition task */
        post: operations["ir_task_create_v2_image_recognition_tasks_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/image-recognition/tasks/{task_uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve single image recognition task */
        get: operations["ir_task_retrieve_v2_image_recognition_tasks__task_uuid__get"];
        /** Update existing image recognition task */
        put: operations["ir_task_update_v2_image_recognition_tasks__task_uuid__put"];
        post?: never;
        /** Delete existing image recognition task */
        delete: operations["ir_task_delete_v2_image_recognition_tasks__task_uuid__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/image-recognition/tasks/{task_uuid}/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve results for an image recognition task */
        get: operations["get_ir_results_list_image_recognition_tasks__task_uuid__results_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/image-recognition/tasks/{task_uuid}/results/{result_uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve specific result for an image recognition task */
        get: operations["get_ir_result_image_recognition_tasks__task_uuid__results__result_uuid__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_create_catalog_item_handler_v2_catalog_items_post */
        Body_create_catalog_item_handler_v2_catalog_items_post: {
            /**
             * Thumbnail
             * Format: binary
             */
            thumbnail: string;
            /** Name */
            name: string;
            /** Barcode */
            barcode?: string | null;
            /** Custom Id */
            custom_id?: string | null;
            /**
             * Height
             * @description Catalog item height in meters
             */
            height?: number | null;
            /**
             * Width
             * @description Catalog item width in meters
             */
            width?: number | null;
            /**
             * Depth
             * @description Catalog item depth in meters
             */
            depth?: number | null;
            /** Brand */
            brand?: string | null;
            /** Size */
            size?: string | null;
            /** Container Type */
            container_type?: string | null;
            /** Flavour */
            flavour?: string | null;
            /** Packaging Size */
            packaging_size?: string | null;
            /** Tags */
            tags?: string | null;
        };
        /** Body_create_one_faced_asset_request_handler_v2_catalog_items__item_uuid__asset_requests_one_faced_asset_post */
        Body_create_one_faced_asset_request_handler_v2_catalog_items__item_uuid__asset_requests_one_faced_asset_post: {
            /**
             * Image
             * Format: binary
             */
            image: string;
        };
        /** Body_image_recognition_multi_images_async_v2_image_recognition_tasks__task_uuid__images_post */
        Body_image_recognition_multi_images_async_v2_image_recognition_tasks__task_uuid__images_post: {
            /** Images */
            images: string[];
        };
        /** Body_image_recognition_single_image_sync_wrapper_image_recognition_tasks__task_uuid__sync_image_post */
        Body_image_recognition_single_image_sync_wrapper_image_recognition_tasks__task_uuid__sync_image_post: {
            /**
             * Image
             * Format: binary
             */
            image: string;
        };
        /** Body_upload_catalog_item_reference_images_handler_v2_catalog_items__item_uuid__reference_images_post */
        Body_upload_catalog_item_reference_images_handler_v2_catalog_items__item_uuid__reference_images_post: {
            /** Images */
            images: string[];
        };
        /** Catalog Item */
        CatalogItemResponse: {
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            status: components["schemas"]["CatalogItemStatus"];
            /**
             * Thumbnail Url
             * Format: uri
             */
            thumbnail_url: string;
            /** Name */
            name?: string | null;
            /** Barcode */
            barcode?: string | null;
            /** Custom Id */
            custom_id?: string | null;
            /**
             * Height
             * @description Catalog item height in meters
             */
            height?: number | null;
            /**
             * Width
             * @description Catalog item width in meters
             */
            width?: number | null;
            /**
             * Depth
             * @description Catalog item depth in meters
             */
            depth?: number | null;
            /** Brand */
            brand?: string | null;
            /** Size */
            size?: string | null;
            /** Container Type */
            container_type?: string | null;
            /** Flavour */
            flavour?: string | null;
            /** Packaging Size */
            packaging_size?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * CatalogItemStatus
         * @enum {string}
         */
        CatalogItemStatus: "READY" | "NEEDS_CAPTURE" | "PROCESSING" | "CAPTURE_FAILED";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** Input for new image recognition */
        IRBatchAsyncRequest: {
            /** Urls */
            urls?: string[];
            /** Callback */
            callback?: string | null;
        };
        /** Image recognition result */
        "IRResultResponse-Input": {
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            /**
             * Task Uuid
             * Format: uuid
             */
            task_uuid: string;
            /**
             * Image Url
             * Format: uri
             */
            image_url: string;
            status: components["schemas"]["IRResultStatus"];
            /** Duration */
            duration?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            postprocessing_results?: components["schemas"]["PostprocessingResults-Input"] | null;
            /** Coco */
            coco?: Record<string, never> | null;
            /** Confidence Score */
            confidence_score?: number | null;
        };
        /** Image recognition result */
        "IRResultResponse-Output": {
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            /**
             * Task Uuid
             * Format: uuid
             */
            task_uuid: string;
            /**
             * Image Url
             * Format: uri
             */
            image_url: string;
            status: components["schemas"]["IRResultStatus"];
            /** Duration */
            duration?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            postprocessing_results?: components["schemas"]["PostprocessingResults-Output"] | null;
            /** Coco */
            coco?: Record<string, never> | null;
            /** Confidence Score */
            confidence_score?: number | null;
        };
        /**
         * IRResultStatus
         * @enum {string}
         */
        IRResultStatus: "PROCESSED" | "IN_PROGRESS" | "FAILED";
        /** Input data for Image Recognition Task */
        IRTaskInputV2: {
            /** Name */
            name: string;
            /** Catalog Items */
            catalog_items?: string[];
            /**
             * Compute Realogram
             * @default false
             */
            compute_realogram: boolean;
            /**
             * Compute Shares
             * @default false
             */
            compute_shares: boolean;
        };
        /** Image Recognition Task */
        IRTaskResponseV2: {
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            /** Name */
            name: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Compute Realogram */
            compute_realogram: boolean;
            /** Compute Shares */
            compute_shares: boolean;
        };
        /** LimitOffsetPage[CatalogItemResponse] */
        LimitOffsetPage_CatalogItemResponse_: {
            /** Items */
            items: components["schemas"]["CatalogItemResponse"][];
            /** Total */
            total: number | null;
            /** Limit */
            limit: number | null;
            /** Offset */
            offset: number | null;
        };
        /** LimitOffsetPage[IRResultResponse] */
        LimitOffsetPage_IRResultResponse_: {
            /** Items */
            items: components["schemas"]["IRResultResponse-Output"][];
            /** Total */
            total: number | null;
            /** Limit */
            limit: number | null;
            /** Offset */
            offset: number | null;
        };
        /** LimitOffsetPage[IRTaskResponseV2] */
        LimitOffsetPage_IRTaskResponseV2_: {
            /** Items */
            items: components["schemas"]["IRTaskResponseV2"][];
            /** Total */
            total: number | null;
            /** Limit */
            limit: number | null;
            /** Offset */
            offset: number | null;
        };
        /** PostprocessingResults */
        "PostprocessingResults-Input": {
            /** Realogram */
            realogram?: components["schemas"]["RealogramEntry"][];
            /** Shares */
            shares?: components["schemas"]["ShareResult"][];
        };
        /** PostprocessingResults */
        "PostprocessingResults-Output": {
            /** Realogram */
            realogram?: components["schemas"]["RealogramEntry"][];
            /** Shares */
            shares?: components["schemas"]["ShareResult"][];
        };
        /** RealogramEntry */
        RealogramEntry: {
            /** Annotation Id */
            annotation_id: number;
            /** Shelf Id */
            shelf_id: number;
            /** Slot */
            slot: number;
            /** Category Id */
            category_id?: number | null;
        };
        /** ShareResult */
        ShareResult: {
            /** Image Id */
            image_id: number;
            /** Values */
            values: (components["schemas"]["ShareResultProductValue"] | components["schemas"]["ShareResultTagValue"])[];
        };
        /** ShareResultProductValue */
        ShareResultProductValue: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            group_by: "products";
            /** Product Uuid */
            product_uuid?: string | null;
            /** Count */
            count: number;
            /** Count Ratio */
            count_ratio: number;
            /** Area */
            area: number;
            /** Area Ratio */
            area_ratio: number;
        };
        /** ShareResultTagValue */
        ShareResultTagValue: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            group_by: "tags";
            /** Tag Uuid */
            tag_uuid?: string | null;
            /** Count */
            count: number;
            /** Count Ratio */
            count_ratio: number;
            /** Area */
            area: number;
            /** Area Ratio */
            area_ratio: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_catalog_items_handler_v2_catalog_items_get: {
        parameters: {
            query?: {
                name?: string | null;
                custom_id?: string | null;
                barcode?: string | null;
                /** @description Page size limit */
                limit?: number;
                /** @description Page offset */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LimitOffsetPage_CatalogItemResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_catalog_item_handler_v2_catalog_items_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_create_catalog_item_handler_v2_catalog_items_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CatalogItemResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_catalog_items_single_v2_catalog_items__item_uuid__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CatalogItemResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_catalog_item_reference_images_handler_v2_catalog_items__item_uuid__reference_images_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_catalog_item_reference_images_handler_v2_catalog_items__item_uuid__reference_images_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CatalogItemResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_one_faced_asset_request_handler_v2_catalog_items__item_uuid__asset_requests_one_faced_asset_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_create_one_faced_asset_request_handler_v2_catalog_items__item_uuid__asset_requests_one_faced_asset_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CatalogItemResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    image_recognition_multi_urls_async_v2_image_recognition_tasks__task_uuid__urls_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IRBatchAsyncRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    image_recognition_multi_images_async_v2_image_recognition_tasks__task_uuid__images_post: {
        parameters: {
            query?: {
                callback?: string | null;
            };
            header?: never;
            path: {
                task_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_image_recognition_multi_images_async_v2_image_recognition_tasks__task_uuid__images_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    image_recognition_single_image_sync_wrapper_image_recognition_tasks__task_uuid__sync_image_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_image_recognition_single_image_sync_wrapper_image_recognition_tasks__task_uuid__sync_image_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IRResultResponse-Output"];
                };
            };
            /** @description Request Timeout */
            408: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IRResultResponse-Input"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ir_task_listing_v2_image_recognition_tasks_get: {
        parameters: {
            query?: {
                /** @description Page size limit */
                limit?: number;
                /** @description Page offset */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LimitOffsetPage_IRTaskResponseV2_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ir_task_create_v2_image_recognition_tasks_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IRTaskInputV2"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IRTaskResponseV2"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ir_task_retrieve_v2_image_recognition_tasks__task_uuid__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IRTaskResponseV2"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ir_task_update_v2_image_recognition_tasks__task_uuid__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IRTaskInputV2"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IRTaskResponseV2"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ir_task_delete_v2_image_recognition_tasks__task_uuid__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ir_results_list_image_recognition_tasks__task_uuid__results_get: {
        parameters: {
            query?: {
                start_datetime?: string | null;
                end_datetime?: string | null;
                /** @description Page size limit */
                limit?: number;
                /** @description Page offset */
                offset?: number;
            };
            header?: never;
            path: {
                task_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LimitOffsetPage_IRResultResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ir_result_image_recognition_tasks__task_uuid__results__result_uuid__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_uuid: string;
                result_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IRResultResponse-Output"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
